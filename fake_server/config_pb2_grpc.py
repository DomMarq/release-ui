# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import config_pb2 as config__pb2


class ReleaseStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRelease = channel.unary_unary(
        '/release.Release/GetRelease',
        request_serializer=config__pb2.GetReleaseRequest.SerializeToString,
        response_deserializer=config__pb2.GetReleaseResponse.FromString,
        )
    self.ListReleases = channel.unary_unary(
        '/release.Release/ListReleases',
        request_serializer=config__pb2.ListReleasesRequest.SerializeToString,
        response_deserializer=config__pb2.ListReleasesReponse.FromString,
        )


class ReleaseServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetRelease(self, request, context):
    """Get information about a release from its id
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListReleases(self, request, context):
    """List all releases matching the request
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReleaseServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRelease': grpc.unary_unary_rpc_method_handler(
          servicer.GetRelease,
          request_deserializer=config__pb2.GetReleaseRequest.FromString,
          response_serializer=config__pb2.GetReleaseResponse.SerializeToString,
      ),
      'ListReleases': grpc.unary_unary_rpc_method_handler(
          servicer.ListReleases,
          request_deserializer=config__pb2.ListReleasesRequest.FromString,
          response_serializer=config__pb2.ListReleasesReponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'release.Release', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
